[menu lcd_main_menu]
type: list
name: Main


[menu lcd_main_menu lcd_tune_menu]
type: list
enable: {printer.print_stats.state == "printing" or printer.print_stats.state == "paused"}
name: Tune

[menu lcd_main_menu lcd_tune_menu Speed]
type: input
name:
  {% set left = "Speed:" %}
  {% set right = "[{0:4.0%}]".format(menu.input) %}
  {"{0:<{2}}{1}".format(left, right, 19-(right|length))}
input: {printer.gcode_move.speed_factor}
input_min: 0.01
input_max: 5
input_step: 0.01
realtime: True
gcode:
  M220 S{'%d' % (menu.input*100)}

[menu lcd_main_menu lcd_tune_menu Nozzle]
type: input
enable: {('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}
name:
  {% set left = "Nozzle:" %}
  {% set right = "[{0:3.0f}>{1:3.0f}]".format(printer.extruder.temperature, menu.input) %}
  {% set final = "{0:<{2}}{1}".format(left, right, 19-(right|length)) %}
  {final.replace(">", "~right_arrow~")}
input: {printer.extruder.target}
input_min: 0
input_max: {printer.configfile.config.extruder.max_temp}
input_step: 1
gcode:
  M104 T0 S{'%.0f' % menu.input}

[menu lcd_main_menu lcd_tune_menu Bed]
type: input
enable: {'heater_bed' in printer}
name:
  {% set left = "Bed:" %}
  {% set right = "[{0:3.0f}>{1:3.0f}]".format(printer.heater_bed.temperature, menu.input) %}
  {% set final = "{0:<{2}}{1}".format(left, right, 19-(right|length)) %}
  {final.replace(">", "~right_arrow~")}
input: {printer.heater_bed.target}
input_min: 0
input_max: {printer.configfile.config.heater_bed.max_temp}
input_step: 1
gcode:
  M140 S{'%.0f' % menu.input}

[menu lcd_main_menu lcd_tune_menu Fan_speed]
type: input
enable: {'fan' in printer}
name:
  {% set left = "Fan speed:" %}
  {% set right = "[{0:4.0%}]".format(menu.input) %}
  {"{0:<{2}}{1}".format(left, right, 19-(right|length))}
input: {printer.fan.speed}
input_min: 0
input_max: 1
input_step: 0.01
gcode:
  M106 S{'%d' % (menu.input*255)}

[menu lcd_main_menu lcd_tune_menu Flow]
type: input
name:
  {% set left = "Flow:" %}
  {% set right = "[{0:4.0%}]".format(menu.input) %}
  {"{0:<{2}}{1}".format(left, right, 19-(right|length))}
input: {printer.gcode_move.extrude_factor}
input_min: 0.01
input_max: 2
input_step: 0.01
realtime: True
gcode:
  M221 S{'%d' % (menu.input*100)}


[menu lcd_main_menu lcd_preheat_menu]
type: list
enable: {('extruder' in printer) and ('heater_bed' in printer) and (printer.print_stats.state != "printing")}
name: Preheat

[menu lcd_main_menu lcd_preheat_menu PLA]
type: command
name: "PLA       ~right_arrow~215/ 60"
gcode:
  M140 S60
  M104 S215
  {menu.exit()}

[menu lcd_main_menu lcd_preheat_menu XT]
type: command
name: "XT        ~right_arrow~250/ 90"
gcode:
  M140 S90
  M104 S250
  {menu.exit()}

[menu lcd_main_menu lcd_preheat_menu NGEN_FLEX]
type: command
name: "NGEN FLEX ~right_arrow~260/ 85"
gcode:
  M140 S85
  M104 S260
  {menu.exit()}

[menu lcd_main_menu lcd_preheat_menu COOLDOWN]
type: command
name: "Cooldown  ~right_arrow~  0/  0"
gcode:
  M140 S0
  M104 S0
  {menu.exit()}


[menu lcd_main_menu lcd_pause_print]
type: command
enable: {('virtual_sdcard' in printer) and printer.print_stats.state == "printing"}
name: Pause print
gcode:
  {% if "pause_resume" in printer %}
    PAUSE
  {% else %}
    M25
  {% endif %}
  {menu.exit()}


[menu lcd_main_menu lcd_resume_print]
type: command
enable: {('virtual_sdcard' in printer) and printer.print_stats.state == "paused"}
name: Resume print
gcode:
  {% if "pause_resume" in printer %}
    RESUME
  {% else %}
    M24
  {% endif %}
  {menu.exit()}


[menu lcd_main_menu lcd_print_stop]
type: command
enable: {('virtual_sdcard' in printer) and (printer.print_stats.state == "printing" or printer.print_stats.state == "paused")}
name: Stop print
gcode:
  {% if 'pause_resume' in printer %}
    CANCEL_PRINT
  {% else %}
    M25
    M27
    M26 S0
    TURN_OFF_HEATERS
    {% if printer.toolhead.position.z <= printer.toolhead.axis_maximum.z - 5 %}
      G91
      G0 Z5 F1000
      G90
    {% endif %}
  {% endif %}
  {menu.exit()}


[menu lcd_main_menu lcd_sdcard_menu]
type: vsdlist
enable: {('virtual_sdcard' in printer) and not (printer.print_stats.state == "printing" or printer.print_stats.state == "paused")}
name: Print from SD


# [menu lcd_main_menu Sheet]
# type: input
# enable: {not (printer.print_stats.state == "printing" or printer.print_stats.state == "paused")}
# name:
#   {% set left = "Sheet:" %}
#   {% set right = "[{0:3.0f}>{1:3.0f}]".format(printer.extruder.temperature, menu.input) %}
#   {% set final = "{0:<{2}}{1}".format(left, right, 19-(right|length)) %}
#   {final.replace(">", "~right_arrow~")}
# input: {printer.extruder.target}
# input_min: 0
# input_max: {printer.configfile.config.extruder.max_temp}
# input_step: 1
# gcode:
#   M104 T0 S{'%.0f' % menu.input}

[menu lcd_main_menu lcd_LoadFilament]
type: command
enable: {printer.print_stats.state != "printing"}
name: Load filament
gcode:
  LOAD_FILAMENT


[menu lcd_main_menu lcd_unLoadFilament]
type: command
enable: {printer.print_stats.state != "printing"}
name: Unload filament
gcode:
  UNLOAD_FILAMENT


[menu lcd_main_menu lcd_settings_menu]
type: list
enable: {not (printer.print_stats.state == "printing" or printer.print_stats.state == "paused")}
name: Settings

[menu lcd_main_menu lcd_settings_menu lcd_control_temperature_menu]
type: list
name: Temperature

[menu lcd_main_menu lcd_settings_menu lcd_control_temperature_menu Nozzle]
type: input
enable: {('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}
name:
  {% set left = "Nozzle:" %}
  {% set right = "[{0:3.0f}>{1:3.0f}]".format(printer.extruder.temperature, menu.input) %}
  {% set final = "{0:<{2}}{1}".format(left, right, 19-(right|length)) %}
  {final.replace(">", "~right_arrow~")}
input: {printer.extruder.target}
input_min: 0
input_max: {printer.configfile.config.extruder.max_temp}
input_step: 1
gcode:
  M104 T0 S{'%.0f' % menu.input}

[menu lcd_main_menu lcd_settings_menu lcd_control_temperature_menu Bed]
type: input
enable: {'heater_bed' in printer}
name:
  {% set left = "Bed:" %}
  {% set right = "[{0:3.0f}>{1:3.0f}]".format(printer.heater_bed.temperature, menu.input) %}
  {% set final = "{0:<{2}}{1}".format(left, right, 19-(right|length)) %}
  {final.replace(">", "~right_arrow~")}
input: {printer.heater_bed.target}
input_min: 0
input_max: {printer.configfile.config.heater_bed.max_temp}
input_step: 1
gcode:
  M140 S{'%.0f' % menu.input}

[menu lcd_main_menu lcd_settings_menu lcd_control_temperature_menu Fan_speed]
type: input
enable: {'fan' in printer}
name:
  {% set left = "Fan speed:" %}
  {% set right = "[{0:4.0%}]".format(menu.input) %}
  {"{0:<{2}}{1}".format(left, right, 19-(right|length))}
input: {printer.fan.speed}
input_min: 0
input_max: 1
input_step: 0.01
gcode:
  M106 S{'%d' % (menu.input*255)}

[menu lcd_main_menu lcd_settings_menu lcd_move_menu_axis]
type: list
enable: {not printer.idle_timeout.state == "Printing"}
name: Move axis

[menu lcd_main_menu lcd_settings_menu lcd_move_menu_axis lcd_move_x]
type: input
name:
  {% set left = "Move X:" %}
  {% if 'x' in printer.toolhead.homed_axes %}
    {% set right = "[{0:05.1f}]".format(menu.input) %}
  {% else %}
    {% set right = "[Home]" %}
  {% endif %}
  {"{0:<{2}}{1}".format(left, right, 19-(right|length))}
input: {printer.gcode_move.gcode_position.x}
input_min: {printer.toolhead.axis_minimum.x}
input_max: {printer.toolhead.axis_maximum.x}
input_step: 1.0
Realtime: True
gcode:
  {% if 'x' in printer.toolhead.homed_axes %}
    SAVE_GCODE_STATE NAME=__move__axis
    G90
    G1 X{menu.input} F2700
    RESTORE_GCODE_STATE NAME=__move__axis
  {% else %}
    G28 X
  {% endif %}

[menu lcd_main_menu lcd_settings_menu lcd_move_menu_axis lcd_move_y]
type: input
name:
  {% set left = "Move Y:" %}
  {% if 'y' in printer.toolhead.homed_axes %}
    {% set right = "[{0:05.1f}]".format(menu.input) %}
  {% else %}
    {% set right = "[Home]" %}
  {% endif %}
  {"{0:<{2}}{1}".format(left, right, 19-(right|length))}
input: {printer.gcode_move.gcode_position.y}
input_min: {printer.toolhead.axis_minimum.y}
input_max: {printer.toolhead.axis_maximum.y}
input_step: 1.0
Realtime: True
gcode:
  {% if 'y' in printer.toolhead.homed_axes %}
    SAVE_GCODE_STATE NAME=__move__axis
    G90
    G1 Y{menu.input} F2700
    RESTORE_GCODE_STATE NAME=__move__axis
  {% else %}
    G28 Y
  {% endif %}

[menu lcd_main_menu lcd_settings_menu lcd_move_menu_axis lcd_move_z]
type: input
name:
  {% set left = "Move Z:" %}
  {% if 'z' in printer.toolhead.homed_axes %}
    {% set right = "[{0:05.1f}]".format(menu.input) %}
  {% else %}
    {% set right = "[Home]" %}
  {% endif %}
  {"{0:<{2}}{1}".format(left, right, 19-(right|length))}
input: {printer.gcode_move.gcode_position.z}
input_min: {printer.toolhead.axis_minimum.z}
input_max: {printer.toolhead.axis_maximum.z}
input_step: 1.0
Realtime: True
gcode:
  {% if 'z' in printer.toolhead.homed_axes %}
    SAVE_GCODE_STATE NAME=__move__axis
    G90
    G1 Z{menu.input} F1000
    RESTORE_GCODE_STATE NAME=__move__axis
  {% else %}
    G28 Z
  {% endif %}

[menu lcd_main_menu lcd_settings_menu lcd_move_menu_axis lcd_move_e]
type: input
name:
  {% set left = "Extruder:" %}
  {% set right = "[{0:05.1f}]".format(menu.input) %}
  {"{0:<{2}}{1}".format(left, right, 19-(right|length))}
input: {printer.gcode_move.gcode_position.e}
input_step: 1.0
Realtime: True
gcode:
  SAVE_GCODE_STATE NAME=__move__axis
  M82
  G1 E{menu.input} F100
  RESTORE_GCODE_STATE NAME=__move__axis

[menu lcd_main_menu lcd_settings_menu disable_steppers]
type: command
name: Disable steppers
gcode:
  M84


[menu lcd_main_menu lcd_calibration_menu]
type: list
enable: {not (printer.print_stats.state == "printing" or printer.print_stats.state == "paused")}
name: Calibration

[menu lcd_main_menu lcd_calibration_menu auto_home]
type: command
enable: {not (printer.print_stats.state == "printing" or printer.print_stats.state == "paused")}
name: Auto Home
gcode:
  G28

[menu lcd_main_menu lcd_calibration_menu lcd_mesh_calibration_z]
type: command
enable: {not (printer.print_stats.state == "printing" or printer.print_stats.state == "paused")}
name: Calibrate Z
gcode:
  {menu.exit()}
  UNFUCK_Z

[menu lcd_main_menu lcd_calibration_menu lcd_mesh_bedleveling]
type: command
enable: {not (printer.print_stats.state == "printing" or printer.print_stats.state == "paused")}
name: Mesh Bed Leveling
gcode:
  {menu.exit()}
  G80

################### status screen ###################

[display_glyph feedrate_prusa]
hd44780_slot: 3
hd44780_data:
  .....
  ..*..
  *..*.
  .*..*
  *..*.
  ..*..
  .....
  .....

[display_template lcdui_print_temp]
param_heater_name: "extruder"
text:
  {% if param_heater_name in printer %}
    {% set heater = printer[param_heater_name] %}
    # Show glyph
    {% if param_heater_name == "heater_bed" %}
      {% if heater.target %}
        {% set frame = (printer.toolhead.estimated_print_time|int % 2) + 1 %}
        ~bed_heat{frame}~
      {% else %}
        ~bed~
      {% endif %}
    {% else %}
      ~extruder~
    {% endif %}
    # Show temperature
    { "%5.1f" % (heater.temperature,) }
    # Show target
      { "/%0.0f" % (heater.target,) }
    ~degrees~
  {% endif %}

[display_template lcdui_print_Z_coord]
text:
  { "Z%6.2f%s" % (printer.gcode_move.gcode_position.z, " " if 'z' in printer.toolhead.homed_axes else "?") }

[display_template lcdui_print_feedrate]
text:
  { "~feedrate_prusa~{:>4.0%}   ".format(printer.gcode_move.speed_factor) }

[display_template lcdui_print_percent_done]
text:
  {% if 'virtual_sdcard' in printer and printer.virtual_sdcard.progress %}
    {" SD{:>4.0%}".format(printer.display_status.progress)}
  {% else %}
    {"   ---%"}
  {% endif %}

[display_template lcdui_print_time]
text:
  {% set final = "--:--" %}
  {% if 'virtual_sdcard' in printer and printer.virtual_sdcard.progress %}
    {% set suff = "" %}
    {% set print_t = (printer.idle_timeout.printing_time // 60 ) %}
    {% set print_tr = (printer["gcode_macro M73"].r) %}
    {% if print_tr != Null %}
      {% set print_t = print_tr %}
      {% set suff = "R" %}
    {% endif %}
    {% if (printer.gcode_move.speed_factor != 1) and (print_t == print_tr) %}
      {% set suff = suff + "?" %}
      {% set print_t = print_t / printer.gcode_move.speed_factor %}
    {% endif %}
    {% if print_t < 6000 %}
      {% set final = "{0:0>2d}:{1:0>2d}".format((print_t // 60)|int, (print_t % 60)|int) %}
    {% else %}
      {% set final = "{0:3d}h ".format((print_t // 60)|int) %}
    {% endif %}
    {% set final = final + suff %}
    
  {% endif %}
  {"~clock~{:<7}".format(final)}

[display_template lcdui_print_status_line]
text:
  {% if printer.display_status.message %}
    { printer.display_status.message }
  # {% elif printer.idle_timeout.printing_time %}
  #   {% set pos = printer.toolhead.position %}
  #   { "X%-4.0fY%-4.0fZ%-5.2f" % (pos.x, pos.y, pos.z) }
  {% else %}
    Ready
  {% endif %}


[display_data lcd_status_screen extruder]
position: 0, 0
text: { render("lcdui_print_temp", param_heater_name="extruder") }

[display_data lcd_status_screen heater_bed]
position: 1, 0
text: { render("lcdui_print_temp", param_heater_name="heater_bed") }

[display_data lcd_status_screen percent_done]
position: 2, 0
text: { render("lcdui_print_percent_done") }

[display_data lcd_status_screen Z_coord]
position: 0, 12
text: { render("lcdui_print_Z_coord") }

[display_data lcd_status_screen feedrate]
position: 1, 12
text: { render("lcdui_print_feedrate") }

[display_data lcd_status_screen print_time]
position: 2, 12
text: { render("lcdui_print_time") }

# [display_data lcd_status_screen fan]
# position: 1, 10
# text:
#   {% if 'fan' in printer %}
#     { "Fan {:^4.0%}".format(printer.fan.speed) }
#   {% endif %}

[display_data lcd_status_screen print_status]
position: 3, 0
text: { render("lcdui_print_status_line") }






