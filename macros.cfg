[respond]

[display_status]

[pause_resume]
recover_velocity: 120

[gcode_arcs]
resolution: .4

[force_move]
enable_force_move: True

[gcode_macro SEARCH_VARS]
gcode:
    {% set search = params.S|lower %}
    {% set ns = namespace() %}
    {% for item in printer  %}
        {% if ' ' in item %}
            {% set ns.path = ['printer', "['%s']" % (item), ''] %}
        {% else %}
            {% set ns.path = ['printer.', item, ''] %}   
        {% endif %} 

        {% if search in ns.path|lower %}
            { action_respond_info(ns.path|join) }
        {% endif %} 

        {% if printer[item].items() %}
            {% for childkey, child in printer[item].items() recursive %}
                {% set ns.path = ns.path[:loop.depth|int + 1] %}

                {% if ' ' in childkey %}
                    {% set null = ns.path.append("['%s']" % (childkey)) %}
                {% else %}
                    {% set null = ns.path.append(".%s" % (childkey)) %}
                {% endif %} 

                {% if child is mapping  %}
                    { loop(child.items()) }
                {% else %}
                    {% if search in ns.path|lower %}
                        { action_respond_info("%s : %s" % (ns.path|join, child)) }   
                    {% endif %} 
                {% endif %} 
                
            {% endfor %}
        {% endif %} 
    {% endfor %}

[gcode_macro M23]
description: Start print from SD menu
rename_existing: M23.1
gcode:
  {% set escaped_msg = rawparams.split(';', 1)[0].split('\x23', 1)[0]|replace('"', '\\"') %}
  SDCARD_PRINT_FILE FILENAME="{escaped_msg}"

[gcode_macro M73]
rename_existing: M73.1
variable_P: 0.0
variable_R: 0.0
gcode:
    M73.1 P{params.P}
    SET_GCODE_VARIABLE MACRO=M73 VARIABLE=p VALUE={params.P}
    SET_GCODE_VARIABLE MACRO=M73 VARIABLE=r VALUE={params.R}

[idle_timeout]
timeout: 1200
gcode:
    {% if printer.pause_resume.is_paused %}
    M104 S0
    {% else %}
    TURN_OFF_HEATERS
    M84
    {% endif %}

[gcode_macro M900]
gcode =
  {% if params.K is defined %}
    {% if params.K|float() < 1.0 %}
      SET_PRESSURE_ADVANCE ADVANCE={params.K}
    {% endif %}
  {% else %}
    SET_PRESSURE_ADVANCE ADVANCE=0
  {% endif %}

[gcode_macro G80]
gcode =
	SAVE_GCODE_STATE NAME=G80_state
	BED_MESH_CALIBRATE
	G1 X0 Y0 F24000
	G1 Z0.15
	RESTORE_GCODE_STATE NAME=G80_state

[gcode_macro M300]
variable_S = 1000
variable_P = 100
gcode:
    SET_PIN PIN=BEEPER_pin VALUE={S}
    G4 P{P}
    SET_PIN PIN=BEEPER_pin VALUE=0

[gcode_macro LOAD_FILAMENT]
gcode = 
    SAVE_GCODE_STATE NAME=__filament__load
    M83
    G1 E40 F400
    G1 E30 F400
    G1 E25 F200
    RESTORE_GCODE_STATE NAME=__filament__load

[gcode_macro UNLOAD_FILAMENT]
gcode = 
    SAVE_GCODE_STATE NAME=__filament__load
    M83
    G1 E-45 F5200
    G1 E-15 F1000
    G1 E-20 F1000
    RESTORE_GCODE_STATE NAME=__filament__load

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
variable_park: True
gcode:
  ## Move head and retract only if not already in the pause state and park set to true
  {% if printer.pause_resume.is_paused|lower == 'false' and park|lower == 'true'%}
    _TOOLHEAD_PARK_PAUSE_CANCEL
  {% endif %}
  TURN_OFF_HEATERS
  M106 S0
  CANCEL_PRINT_BASE

[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
gcode:
  PAUSE_BASE
  _TOOLHEAD_PARK_PAUSE_CANCEL

[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
  ##### read extrude from  _TOOLHEAD_PARK_PAUSE_CANCEL  macro #####
  {% set extrude = printer['gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL'].extrude %}
  #### get VELOCITY parameter if specified ####
  {% if 'VELOCITY' in params|upper %}
    {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
  {%else %}
    {% set get_params = "" %}
  {% endif %}
  ##### end of definitions #####
  {% if printer.extruder.can_extrude|lower == 'true' %}
    M83
    G1 E{extrude} F2100
    {% if printer.gcode_move.absolute_extrude |lower == 'true' %} M82 {% endif %}
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}
  RESUME_BASE {get_params}

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description: Helper: park toolhead used in PAUSE and CANCEL_PRINT
variable_extrude: 1.0
gcode:
  ##### set park positon for x and y #####
  # default is your max posion from your printer.cfg
  {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
  {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
  {% set z_park_delta = 2.0 %}
  ##### calculate save lift position #####
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - z_park_delta) %}
    {% set z_safe = z_park_delta %}
  {% else %}
    {% set z_safe = max_z - act_z %}
  {% endif %}
  ##### end of definitions #####
  {% if printer.extruder.can_extrude|lower == 'true' %}
    M83
    G1 E-{extrude} F2100
    {% if printer.gcode_move.absolute_extrude |lower == 'true' %} M82 {% endif %}
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}
  {% if "xyz" in printer.toolhead.homed_axes %}
    G91
    G1 Z{z_safe} F900
    G90
    G1 X{x_park} Y{y_park} F6000
    {% if printer.gcode_move.absolute_coordinates|lower == 'false' %} G91 {% endif %}
  {% else %}
    {action_respond_info("Printer not homed")}
  {% endif %}

# [gcode_macro CANCEL_PRINT]
# description: Cancel the actual running print
# rename_existing: CANCEL_PRINT_BASE
# gcode:
#     TURN_OFF_HEATERS
#     CANCEL_PRINT_BASE

# [gcode_macro PAUSE]
# description: Pause the actual running print
# rename_existing: PAUSE_BASE
# # change this if you need more or less extrusion
# variable_extrude: 1.0
# gcode:
#     ##### read E from pause macro #####
#     {% set E = printer["gcode_macro PAUSE"].extrude|float %}
#     ##### set park positon for x and y #####
#     # default is your max posion from your printer.cfg
#     {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
#     {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
#     ##### calculate save lift position #####
#     {% set max_z = printer.toolhead.axis_maximum.z|float %}
#     {% set act_z = printer.toolhead.position.z|float %}
#     {% if act_z < (max_z - 2.0) %}
#         {% set z_safe = 2.0 %}
#     {% else %}
#         {% set z_safe = max_z - act_z %}
#     {% endif %}
#     ##### end of definitions #####
#     PAUSE_BASE
#     G91
#     {% if printer.extruder.can_extrude|lower == 'true' %}
#       G1 E-{E} F2100
#     {% else %}
#       {action_respond_info("Extruder not hot enough")}
#     {% endif %}
#     {% if "xyz" in printer.toolhead.homed_axes %}
#       G1 Z{z_safe} F900
#       G90
#       G1 X{x_park} Y{y_park} F6000
#     {% else %}
#       {action_respond_info("Printer not homed")}
#     {% endif %} 
    
# [gcode_macro RESUME]
# description: Resume the actual running print
# rename_existing: RESUME_BASE
# gcode:
#     ##### read E from pause macro #####
#     {% set E = printer["gcode_macro PAUSE"].extrude|float %}
#     #### get VELOCITY parameter if specified ####
#     {% if 'VELOCITY' in params|upper %}
#       {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
#     {%else %}
#       {% set get_params = "" %}
#     {% endif %}
#     ##### end of definitions #####
#     {% if printer.extruder.can_extrude|lower == 'true' %}
#       G91
#       G1 E{E} F2100
#     {% else %}
#       {action_respond_info("Extruder not hot enough")}
#     {% endif %}  
#     RESUME_BASE {get_params}

[gcode_macro UNFUCK_Z]
description: Align the Z motors
gcode:
    G28
    FORCE_MOVE STEPPER=stepper_z DISTANCE=200 VELOCITY=30 ACCEL=200
    FORCE_MOVE STEPPER=stepper_z DISTANCE=20 VELOCITY=10 ACCEL=200
    FORCE_MOVE STEPPER=stepper_z DISTANCE=-100 VELOCITY=30 ACCEL=200
    G28

[gcode_macro SAVE_CONFIG]
description: Save config with some exceptions
rename_existing: SAVE_CONFIG_BASE
gcode:
  {action_respond_info("Command ignored cuz it stoooopit")}

# [gcode_macro LOAD_SHEET]
# description: Load the Z offset for the sheet with the specified index
# variable_sheet_names: [""]
# variable_sheet_offsets: [""]
# gcode:
#   {% set svv = printer.save_variables.variables %}
#   {% if params.INDEX is defined %}
#     {% set index = params.INDEX|int %}
#     SAVE_VARIABLE VARIABLE=active_sheet VALUE={index}
#   {% else %}
#     {% if svv.active_sheet is not defined %}
#       {% set index = 0 %}
#       SAVE_VARIABLE VARIABLE=active_sheet VALUE={index}
#     {% else %}
#       {% set index = svv.active_sheet %}
#     {% endif %}
#   {% endif %}
  
#   {action_respond_info("index={0:d}".format(index))}

#   {% set sheet_cnt = sheet_names|length %}
#   {action_respond_info("sheet_cnt={0:d}".format(sheet_cnt))}

#   {% if 0 <= index < sheet_cnt %}
#     {% set offset = sheet_offsets[index]|float %}
#     {action_respond_info("sheet offset={0:f}".format(offset))}
#     SET_GCODE_OFFSET Z={offset}
#   {% else %}
#     {action_raise_error("invalid index")}
#   {% endif %}

# [gcode_macro _SHEET_INIT]
# description: Create sheet
# variable_sheet_names = []
# variable_sheet_offsets = []
# gcode:
#   {% if (params.NAME is defined) and (params.OFFSET is defined) %}
#     # {% set sht = printer['gcode_macro LOAD_SHEET'] %}
#     {% set sheet_cnt = sheet_names|length %}
#     {action_respond_info("sheet_cnt={0:d}".format(sheet_cnt))}
#     {% set sheet_names = [sheet_names] + [params.NAME] %}
#     # SET_GCODE_VARIABLE MACRO=LOAD_SHEET VARIABLE=sheet_names VALUE={names|replace(" ", "")}
#     # {% set names = sht.sheet_names %}
#     # {% set names[sheet_cnt] = params.NAME %}
#     # {% set sht.sheet_names = names %}
#     # SET_GCODE_VARIABLE MACRO=LOAD_SHEET VARIABLE=sheet_names[{sheet_cnt}] VALUE={params.NAME}
#     # SET_GCODE_VARIABLE MACRO=LOAD_SHEET VARIABLE=sheet_offsets[{sheet_cnt}] VALUE={params.OFFSET|float}
#   {% else %}
#     {action_raise_error("Missing params NAME or OFFSET")}
#   {% endif %}

# [delayed_gcode load_sheets]
# initial_duration: 0.1
# gcode:
#   {action_respond_error("loading sheets")}
#   # SET_GCODE_VARIABLE MACRO=LOAD_SHEET VARIABLE=sheets VALUE={"Smooth1" : 0.0, "Satine1:" : -0.3}
#   # LOAD_SHEET
#   {action_respond_error("loading sheets end")}
